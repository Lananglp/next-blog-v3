// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  title             String
  content           String
  excerpt           String
  slug              String   @unique
  status            PostStatus
  categories        PostCategory[]
  tags              String[]
  comments          Comment[]
  author            User      @relation(fields: [authorId], references: [id])
  authorId          String
  featuredImage     String
  altText           String?   
  commentStatus     CommentStatus
  meta              Json
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String[]
  metaImage         String?
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  posts     PostCategory[]
}

model PostCategory { 
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model Profile {
  id          String    @id @default(uuid())
  bio         String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  name              String
  password          String
  image             String?
  imageId           String?
  imageProvider     ImageProvider @default(DEFAULT)
  role              UserRole      @default(USER)
  posts             Post[]
  comments          Comment[]     // Tambahkan ini agar user bisa memiliki komentar
  commentLike       CommentLike[]        // Tambahkan ini agar user bisa menyukai komentar
  profile           Profile?
  // Relasi untuk followers (pengguna yang mengikuti user ini)
  followers         Follow[]      @relation("Followers")
  // Relasi untuk following (pengguna yang diikuti oleh user ini)
  following         Follow[]      @relation("Following")
  receivedReplies   Comment[]     @relation("ReplyToUser")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Image {
  id          String          @id @default(uuid())
  url         String
  createdAt   DateTime        @default(now())
}

model Follow {
  id            String        @id @default(uuid())
  followerId    String
  followedId    String
  createdAt     DateTime      @default(now())
  follower      User          @relation("Following", fields: [followerId], references: [id])
  followed      User          @relation("Followers", fields: [followedId], references: [id])

  @@unique([followerId, followedId]) // Mencegah duplikat follow
}

model Comment {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  content         String
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  parent          Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId        String?
  replies         Comment[] @relation("ParentChild")
  likes           CommentLike[]
  replyToUser     User? @relation("ReplyToUser", fields: [replyToUserId], references: [id])
  replyToUserId   String?
}

model CommentLike {
  id        String   @id @default(uuid())
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId]) // Satu user hanya bisa like satu kali per komentar
}

enum ImageProvider {
  DEFAULT
  OTHER
}

enum UserRole {
  ADMIN
  USER
}

enum PostStatus {
  PUBLISH
  DRAFT
  PRIVATE
}

enum CommentStatus {
  OPEN
  CLOSED
}